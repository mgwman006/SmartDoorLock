#include I2C.h

void I2C_Init(unsigned long int clock_freq)
{
    TRISB |= 0x03;                              //Configuring SDA and SCL as input pins
    SSPCON1 = 0x28;                              //Configuring as I2C Master mode with SCL clock frequency= FOSC/(4 * (SSPADD + 1))
    SSPADD = (_XTAL_FREQ/(4*clock_freq))-1;     //Setting SCL frequency with value in clock_freq
    SSPSTAT = 0x00;                             //Resetting SSPSTAT register
    SSPIF = 0;                                  //Resetting MSSP interrupt flag                                 
    
}



void I2C_Idle(void)
{
  // Wait for Status Idle (i.e. ACKEN, RCEN, PEN, RSEN, SEN) and I2C Bus stop detection
  while (( SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ));
}
 
void MSSP_Wait(void)
{
    while(!SSPIF);                              //wait till SSPIF flag is set
    SSPIF=0;
}
 
void I2C_Start(void)
{
    I2C_Idle();                                 //Check if the I2C bus is idle
    SEN=1;                                      //Initiate start condition
    mssp_wait();                                //Wait till completion of event
}


int I2C_Write(unsigned char data)
{
    L1: SSPBUF=data;                            //Input data to buffer
    MSSP_Wait();                                //Wait till completion of event
    while(ACKSTAT)                              //check if acknowledgement signal received 
    {
        i2c_restart;                            //If no acknowledgement received, give restart signal and transmit data again
        goto L1;
    }
}



unsigned char I2C_Read(void)
{
    RCEN=1;                                     //Enable reception in Master device 
    while(!BF);                                 //Wait till buffer is full
    RCEN=0;                                     //Enable reception in Master device 
    return SSPBUF;                              //return received data
    
}


void I2C_Ack(void)
{
    ACKDT=0;                                    //Set as acknowledgement
    ACKEN=1;                                    //Initiate acknowledgement signal
    mssp_wait();                                //Wait till completion of event
}
 
void I2C_Nack(void)
{
    ACKDT=1;                                    //Set as negative acknowledgement
    ACKEN=1;                                    //Initiate negative acknowledgement signal
    mssp_wait();                                //Wait till completion of event
}


void I2C_Stop(void)
{
    PEN=1;                                      //Initiate Stop condition
    mssp_wait();                                //Wait till completion of event
    SSPEN=0;                                    //Disable I2C operation
}


void I2C_Restart(void)
{
    RSEN=1;                                     //Initiate restart condition
    mssp_wait();                                //Wait till completion of event
}
